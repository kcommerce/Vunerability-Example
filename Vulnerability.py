import sqlite3
from flask import Flask, request, session
import hashlib
import requests

app = Flask(__name__)
app.secret_key = 'super_secret_key'


# A01:2021-Broken Access Control
@app.route('/admin')
def admin():
    if session.get('role') == 'admin':
        return "Welcome to the admin panel."
    else:
        return "Access denied."


# A02:2021-Cryptographic Failures
def insecure_hash(password):
    # Using MD5 for hashing, which is considered insecure
    return hashlib.md5(password.encode()).hexdigest()


# A03:2021-Injection
@app.route('/user/<username>')
def get_user(username):
    conn = sqlite3.connect('example.db')
    cursor = conn.cursor()
    query = "SELECT * FROM users WHERE username = '{}';".format(username)
    cursor.execute(query)
    result = cursor.fetchall()
    conn.close()
    return str(result)


# A04:2021-Insecure Design
@app.route('/xss')
def xss():
    user_input = request.args.get('input')
    # Potential XSS vulnerability
    return "User input: {}".format(user_input)


# A05:2021-Security Misconfiguration
@app.route('/misconfig')
def misconfig():
    # Disabling SSL certificate validation
    requests.packages.urllib3.disable_warnings()
    response = requests.get('https://example.com', verify=False)
    return response.text


# A06:2021-Vulnerable and Outdated Components
def vulnerable_component():
    # Using a vulnerable version of a library
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


# A07:2021-Identification and Authentication Failures
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']
    if username == 'admin' and password == 'password123':
        session['logged_in'] = True
        return "Login successful"
    else:
        return "Login failed"


# A08:2021-Software and Data Integrity Failures
@app.route('/load')
def load():
    # Loading a module dynamically based on user input
    module_name = request.args.get('module')
    mod = __import__(module_name)
    return "Module {} loaded".format(module_name)


# A09:2021-Security Logging and Monitoring Fail
